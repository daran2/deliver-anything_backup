spring:
  application:
    name: deliver-anything

  config:
    import: optional:file:.env   # .env 파일에서 환경변수 불러오기

  # ===== Virtual Threads 설정 (Java 21+) =====
  threads:
    virtual:
      enabled: true  # Virtual Threads 활성화

  # ===== 비동기 작업 설정 =====
  task:
    execution:
      pool:
        # Virtual Thread 사용 시 아래 설정은 무시됨 (VirtualThreadConfig가 우선)
        core-size: 8
        max-size: 16
        queue-capacity: 100
      thread-name-prefix: async-

  sql:
    init:
      mode: never

  jpa:
    defer-datasource-initialization: true
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        time_zone: UTC                      # UTC 시간대 설정 (서버와 DB 시간대 일치)
        format_sql: true                    # SQL 포맷팅해서 출력
        highlight_sql: true                 # SQL 색상 하이라이트
        use_sql_comments: true              # SQL에 주석 추가
        use-new-id-generator-mappings: true # 새로운 ID 생성 전략 사용
        default_batch_fetch_size: 50        # Lazy 로딩 시 Batch Fetch 최적화 (N+1 문제 완화)
        generate_statistics: true           # Hibernate 통계 출력 (캐시 히트율, 쿼리 횟수 등)

  datasource:
    url: jdbc:h2:./dev;MODE=MySQL;INIT=CREATE SCHEMA IF NOT EXISTS GIS;
    driver-class-name: org.h2.Driver     # H2 드라이버
    username: sa                         # 기본 사용자
    password:                            # 비밀번호 없음

  jackson:
    serialization:
      fail-on-empty-beans: false  # 빈 객체 직렬화 시 에러 방지

  data:
    redis:
      host: localhost      # Redis 호스트
      port: 6379           # Redis 포트
      password:            # Redis 비밀번호 없음
      timeout: 6000ms      # 연결 타임아웃 (6초)
      lettuce:
        pool:
          # Virtual Thread 사용 시 connection pool 설정 최적화
          max-active: 100    # 최대 연결 수
          max-idle: 50       # 최대 유휴 연결
          min-idle: 10       # 최소 유휴 연결
          max-wait: 3000ms   # 연결 대기 시간

  elasticsearch:
    uris:
      - localhost:9200

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_API_KEY}
            scope:
              - account_email
              - profile_nickname
              - profile_image
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}'
            client-name: Kakao
            authorization-grant-type: authorization_code
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}'
            client-name: Google
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
              - profile_image
            redirect-uri: '{baseUrl}/{action}/oauth2/code/{registrationId}'
            client-name: Naver
            authorization-grant-type: authorization_code\
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  mail:
    host: smtp.gmail.com # Gmail의 SMTP 서버 호스트
    port: 587 # Gmail SMTP 서버는 587번 포트를 사용
    username: ${MAIL_USERNAME}  # Gmail 주소
    password: ${MAIL_PASSWORD}  # Gmail 앱 비밀번호
    properties:
      mail:
        smtp:
          auth: true # SMTP 서버에 인증 필요한 경우 true로 지정 Gmail은 요구함
          starttls:
            enable: true # SMTP 서버가 TLS를 사용하여 안전한 연결을 요구하는 경우 true로 설정
            required: true
          connectiontimeout: 5000  # 클라이언트가 SMTP 서버와의 연결을 설정하는 데 대기해야 하는 시간
          timeout: 5000 # 클라이언트가 SMTP 서버로부터 응답을 대기해야 하는 시간
          writetimeout: 5000 # 클라이언트가 작업을 완료하는데 대기해야 하는 시간
      auth-code-expiration-millis: 600000  # 10 * 60 * 1000 == 10분 이메일 인증 코드의 만료 시간(Millisecond)

springdoc:
  default-produces-media-type: application/json;charset=UTF-8   # API 응답 기본 Content-Type
  api-docs:
    enabled: true                       # API 문서(JSON) 활성화
  swagger-ui:
    enabled: true                       # Swagger UI 활성화
    path: /swagger-ui.html              # Swagger UI 접속 경로
  override-with-generic-response: false # Swagger 응답 기본 덮어쓰기 여부

logging:
  level:
    com.back: DEBUG                                     # 패키지 로그 레벨
    com.deliveranything: INFO                           # 애플리케이션 로그
    com.deliveranything.global.config.VirtualThreadConfig: INFO  # Virtual Thread 설정 로그
    org.hibernate.SQL: DEBUG                            # SQL 로그 출력
    org.hibernate.orm.jdbc.bind: TRACE                  # SQL 바인딩 로그 (파라미터 값)
    org.hibernate.orm.jdbc.extract: TRACE               # SQL 결과 추출 로그
    org.springframework.transaction.interceptor: TRACE  # 트랜잭션 동작 로그
    org.springframework.scheduling: DEBUG               # @Async, @Scheduled 로그
    org.springframework.data.redis: INFO                # Redis 로그

management:
  endpoints:
    web:
      exposure:
        include: "health"   # /actuator/health 만 노출
  endpoint:
    health:
      show-details: never   # Health 상세 정보 비공개

toss:
  payments:
    secret-key: ${TOSS_SECRET_KEY}
    toss-url: https://api.tosspayments.com

kakao:
  api:
    key: ${KAKAO_API_KEY}

custom:
  jwt:
    secretKey: ${JWT_SECRET_KEY:your_jwt_secret_key_here}
  accessToken:
    expirationSeconds: "#{60*20}"
  refreshToken:
    expirationDays: 14

  frontend:
    url: ${FRONTEND_URL:http://localhost:3000}
  cookie:
    domain: ${COOKIE_DOMAIN:localhost}

  # 이메일 설정 추가
  email:
    from: ${MAIL_USERNAME}
    verification:
      expirationMinutes: 5

gemini:
  api:
    key: ${GEMINI_API_KEY}
    url: https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent

cloud:
  aws:
    s3:
      bucket: ${AWS_S3_BUCKET_NAME:team9-public-bucket}
    region:
      static: ${AWS_S3_REGION:ap-northeast-2}